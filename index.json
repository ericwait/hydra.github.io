[{"uri":"https://hydraimageprocessor.com/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://hydraimageprocessor.com/forum/","title":"Forum","tags":[],"description":"","content":"Hydra utilizes GitHub\u0026rsquo;s discussion feature. You can find the discussion here.\n"},{"uri":"https://hydraimageprocessor.com/","title":"HIP","tags":[],"description":"","content":"Hydra Image Processor Hydra Image Processor (also know as Hydra or HIP) is a image filtering toolkit that uses GPU acceleration.\nWhy use Hydra? Light microscopes can now capture data in five dimensions at very high frame rates producing terabytes of data per experiment. Five-dimensional data has three spatial dimensions (x, y, z), multiple channels ($\\lambda$) and time (t). Current tools are prohibitively time consuming and do not efficiently utilize available hardware. The Hydra is a new library providing hardware-accelerated image processing accessible from interpreted languages including MATLAB and Python. Hydra automatically distributes data/computation across system and video RAM allowing hardware-accelerated processing of arbitrarily large images. Hydra also partitions compute tasks optimally across multiple GPUs. Hydra includes a new kernel renormalization reducing boundary effects associated with widely used padding approaches.\n"},{"uri":"https://hydraimageprocessor.com/quick-start/","title":"Quick Start","tags":[],"description":"","content":"Download Download the current files for Windows and Linux here.\nRequirements Windows  Nvidia graphics card (compute capability 3.5 or better) MATLAB 2018 or newer The latest Graphics driver  MacOS Currently unsupported.\nUsing Hydra with MATLAB  Download the MATLAB zip file from the download link above. Unzip the files. Place all folders with the + (plus) symbol in your MATLAB folder  Windows: C:\\Users\\username\\Documents\\MATLAB) Linux: /home/username/Documents/MATLAB   Open MATLAB Check if Hydra is loaded by running:  dev = HIP.Cuda.DeviceStatus()  Using Hydra with Python  Download the source zip file from the download link above. Unzip the files. Navigate to the src/Python folder. Copy the HIP.lib or HIP.so to a location where you can import into python Check if Hydra is loaded by running:  import HIP dev = HIP.Cuda.DeviceStats() print(dev)  Setting up VSCode for Development   Install python and conda\n  Create virtual environment from environment.yml. conda env create -f src/python/environment.yml\n  Activate environment conda activate hydra\n  Configure the project with cmake\n Windows - change C:\\Users\\EricWait\\git\\programming\\hydra-image-processor with where you cloned the project to.  C:\\Program Files\\CMake\\bin\\cmake.exe\u0026quot; --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -Sc:/Users/EricWait/git/programming/hydra-image-processor -Bc:/Users/EricWait/git/programming/hydra-image-processor/build -G \u0026quot;Visual Studio 16 2019\u0026quot; -T host=x64 -A x64   Linux - change /home/ewait/git/programming/_core/hydra-image-processor with the path that you cloned the project to.  /usr/bin/cmake --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_C_COMPILER:FILEPATH=/usr/bin/clang -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/clang++ -S/home/ewait/git/programming/_core/hydra-image-processor -B/home/ewait/git/programming/_core/hydra-image-processor/build -G Ninja    Use CMake Tools extension to build all projects. I recommended that you build in Release mode, so you don\u0026rsquo;t need the debug libraries for python.\n  To test that the build worked, run python src/Python/test_nonchunk.py. You should get the following output (1, 1, 12, 128, 128) with no errors.\n In a windowing environment, you will also see     Happy coding! "},{"uri":"https://hydraimageprocessor.com/tags/","title":"Tags","tags":[],"description":"","content":""}]